#summary Frequently anticipated questions

== So many nice static methods! But how to ease the development, instead of writting static imports all the time? ==
!FluentUtils contains several static methods that eases up lots of constructions provided by this project.

Eclipse (since Europa) support favourite static imports. It allows you to auto complete static methods of a class even when you haven't imported the class (it adds them to the autocomplete list automatically). For this, go to Preferences -> Java -> Editor -> Content Assist -> Favourites. More on this, including some pics, [http://www.ralfebert.de/blog/eclipseide/static_methods/ here].

Thefore, if you want to make all static methods from !FluentUtils your prefered ones, just add the type: org.fluentjava.FluentUtils to your favourites.

== What is this _type parameters of `<`T`>`T cannot be determined; no unique maximal instance exists for type variable T with ..._ error?==
This can usually happen when using generic methods with primitives or generic types. For instance:

{{{
E e = closure.invoke();
booean bol = closure.invoke();
}}}

Eclipse compiler allows it, but javac doesn't. Some ways around this:

 * Specify the type:
{{{
E e = closure.<E>invoke();
booean bol = closure.<Boolean>invoke();
}}}

 * This doesn't work on primitives, as they can't be generic types: do not use autoboxxing:
{{{
Booean bol = closure.<Boolean>invoke();
}}}